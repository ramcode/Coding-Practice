package com.interview.algos.strings;

import java.util.ArrayList;
import java.util.List;

public class KMPStringMatching {

	
	public static List<Integer> patternMatchingNaive(String pattern, String text){
		List<Integer> matchIndices = new ArrayList<Integer>();
		char[] textChars = text.toCharArray();
		char[] patternChars = pattern.toCharArray();
		int j;
		for(int i=0;i<text.length()-pattern.length()+1; i++){
			for(j =0 ; j<pattern.length(); j++){
				if(textChars[i+j]!=patternChars[j]){
					break;
				}
			}
			if(j==pattern.length()){
				System.out.println("Match found at index: "+i);
				matchIndices.add(i);
			}
				
		}
		return matchIndices;
	}
	
	/*public static List<Integer> patternMatchingKMP(String pattern, String text){
		List<Integer> matchIndices = new ArrayList<Integer>();
		char[] textChars = text.toCharArray();
		char[] patternChars = pattern.toCharArray();
		
	}*/
	
	public static int[] buildPrefixArray(String pattern){
		int[] prefixArray = new int[pattern.length()];
		int j=0;
		prefixArray[0] = 0;
		char[] patArray = pattern.toCharArray();
		for(int i=1; i<pattern.length();){
			if(patArray[i]==patArray[j]){
				prefixArray[i] = j+1;
				i++;
				j++;
			}
			else{ if(j!=0){
				j = prefixArray[j-1];
			}
			else{
				prefixArray[i] = 0;
				i++;
			}
			}
		}
		return prefixArray;
	}
	
	public static void main(String[] args){
		/*long stime = System.currentTimeMillis();
		System.out.println(patternMatchingNaive("ATGCGAGGGCSGGSG", "ATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSGATGCGAGGGCSGGSG"));
		long etime = System.currentTimeMillis();
		System.out.println("time took: "+(etime-stime)/(1000)+" seconds");*/
		for(int a: buildPrefixArray("aababbaaa")){
			System.out.print(a+" ");
		}
	}
}
